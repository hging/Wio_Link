[{"SKU": "MD13S", "WikiURL": "https://docs.google.com/document/d/1icu1GVDxZhUn3ADSUc3JknNcmUMdPcsnJ4MhxOPRo-I/view", "GroveName": "Cytron 13Amp DC Motor Driver - SMD Compatible (MD13S)", "Author": "CYTRON", "ImageURL": "https://c6.staticflickr.com/9/8757/28828082141_246df104a1.jpg", "ClassName": "CytronMD13S", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 0, "ConstructArgList": ["int pintx", "int pinrx"], "Files": ["cytron_motor_driver_md13s.cpp", "cytron_motor_driver_md13s.h"], "ClassFile": "cytron_motor_driver_md13s.h", "Description": "Grove compatible DC motor driver which supports 6-30V, 30A peak and 13A continuous current.", "AddedAt": 1470787200, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_direction": {"Raw": ["int *direction"], "Returns": [["int", "direction"]], "Arguments": []}, "read_speed_dir": {"Raw": ["float *speed", "int *direction"], "Returns": [["float", "speed"], ["int", "direction"]], "Arguments": []}, "read_speed": {"Raw": ["float *speed"], "Returns": [["float", "speed"]], "Arguments": []}}, "InterfaceType": "UART", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/cytron_motor_driver_md13s", "Writes": {"write_speed": {"Arguments": [["float", "speed"]]}, "write_direction": {"Arguments": [["int", "direction"]]}, "write_speed_dir": {"Arguments": [["float", "speed"], ["int", "direction"]]}}}, {"SKU": "104030003", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_4-Digit_Display", "GroveName": "Grove - 4-Digit Display", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-4-digit-display.jpg", "ClassName": "Grove4Digit", "CanGetLastError": true, "HasPowerOffFunc": true, "HackGuideURL": "", "ID": 1, "ConstructArgList": ["int pintx", "int pinrx"], "Files": ["grove_4_digit.cpp", "grove_4_digit.h"], "ClassFile": "grove_4_digit.h", "Description": "4 digit display module is usually a 12 pin module. In this Grove gadget, we utilize a TM1637 to scale down the controlling pins into 2 Grove pins. It only takes 2 digital pins of Arduino or Seeeduino to control the content, even the luminance of this display. For projects that require of alpha-numeric display, this can be a nice choice.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": true, "Reads": {}, "InterfaceType": "UART", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_4_digit", "Writes": {"write_display_point": {"Arguments": [["uint8_t", "display"]]}, "write_display_digits": {"Arguments": [["uint8_t", "start_pos"], ["char *", "chars"]]}, "write_clear": {"Arguments": []}, "write_display_one_digit": {"Arguments": [["uint8_t", "position"], ["char *", "chr"]]}, "write_brightness": {"Arguments": [["uint8_t", "brightness"]]}}}, {"SKU": "101020039", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_3-Axis_Digital_Accelerometer(\u00b11.5g)", "GroveName": "Grove-3Axis Digital Acc(\u00b11.5g)", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/Grove-3-Axis-Digital-Accelerometer-MMA7660.jpg", "ClassName": "GroveAccMMA7660", "CanGetLastError": false, "HasPowerOffFunc": true, "HackGuideURL": "", "ID": 2, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_acc_mma7660.cpp", "grove_acc_mma7660.h"], "ClassFile": "grove_acc_mma7660.h", "Description": "This 3-Axis Digital Accelerometer(\u00b11.5g) is based on Freescale's low power consumption module, MMA7660FC. It features up to 10,000g high shock survivability and configurable Samples per Second rate. Test Range: \u00b11.5g, Sensitivity: 21LSB/g", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": true, "Reads": {"read_acceleration": {"Raw": ["float *ax", "float *ay", "float *az"], "Returns": [["float", "ax"], ["float", "ay"], ["float", "az"]], "Arguments": []}, "read_shaked": {"Raw": ["uint8_t *shaked"], "Returns": [["uint8_t", "shaked"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_acc_mma7660", "Writes": {}}, {"SKU": "101020078", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Air_Quality_Sensor_v1.3", "GroveName": "Grove - Air Quality Sensor", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-Air-quality.jpg", "ClassName": "GroveAirquality", "CanGetLastError": true, "HasPowerOffFunc": true, "HackGuideURL": "", "ID": 3, "ConstructArgList": ["int pin"], "Files": ["grove_airquality_tp401a.cpp", "grove_airquality_tp401a.h"], "ClassFile": "grove_airquality_tp401a.h", "Description": "This sensor is designed for comprehensive monitor over indoor air condition. It's responsive to a wide scope of harmful gases, as carbon monoxide, alcohol, acetone, thinner, formaldehyde and so on. Due to the measuring mechanism, this sensor can not output specific data to describe target gases' concentrations quantitatively. But it's still competent enough to be used in applications that require only qualitative results, like auto refresher sprayers and auto air cycling systems.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": true, "Reads": {"read_quality": {"Raw": ["int *quality"], "Returns": [["int", "quality"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_airquality_tp401a", "Writes": {}}, {"SKU": "101020032", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Barometer_Sensor", "GroveName": "Grove-Barometer(BMP085/BMP180)", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-barometer-sensor-bmp085.jpg", "ClassName": "GroveBaroBMP085", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 4, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_baro_bmp085.cpp", "grove_baro_bmp085.h"], "ClassFile": "grove_baro_bmp085.h", "Description": "This Sensor features a Bosch BMP085 high-accuracy chip to detect barometric pressure and temperature. It can widely measure pressure ranging from 300hPa to 1100hPa, AKA +9000m to -500m above sea level, with a super high accuracy of 0.03hPa(0.25m) in ultra-high resolution mode. NOTE: this driver works for BMP180 as well, although BMP180 is an EOL-ed product, existing users can use this driver.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_temperature": {"Raw": ["float *temperature"], "Returns": [["float", "temperature"]], "Arguments": []}, "read_altitude": {"Raw": ["float *altitude"], "Returns": [["float", "altitude"]], "Arguments": []}, "read_pressure": {"Raw": ["int32_t *pressure"], "Returns": [["int32_t", "pressure"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_baro_bmp085", "Writes": {}}, {"SKU": "101020192", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Barometer_Sensor_(BMP280)", "GroveName": "Grove-Barometer(BMP280)", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-barometer-sensor-bmp280.jpg", "ClassName": "GroveBaroBMP280", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 5, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_baro_bmp280.cpp", "grove_baro_bmp280.h"], "ClassFile": "grove_baro_bmp280.h", "Description": "This sensor is high-precision and low-power digital barometer, can be used to detect temperature and atmospheric pressure accurately. As atmospheric pressure changes with altitude, it can also detect approximate altitude of a place.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_temperature": {"Raw": ["float *temperature"], "Returns": [["float", "temperature"]], "Arguments": []}, "read_altitude": {"Raw": ["float *altitude"], "Returns": [["float", "altitude"]], "Arguments": []}, "read_pressure": {"Raw": ["int32_t *pressure"], "Returns": [["int32_t", "pressure"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_baro_bmp280", "Writes": {}}, {"SKU": "101020003", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Button", "GroveName": "Grove-Button", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-Button.jpg", "ClassName": "GroveButton", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 6, "ConstructArgList": ["int pin"], "Files": ["grove_button.cpp", "grove_button.h"], "ClassFile": "grove_button.h", "Description": "Grove Button is a momentary push button. It contains one independent \"momentary on/off\" button. \u201cMomentary\u201d means that the button rebounds on its own after it is released. The button outputs a HIGH signal when pressed, and LOW when released.", "AddedAt": 1443657600, "Events": {"button_pressed": "int16_t"}, "HasPowerOnFunc": false, "Reads": {"read_pressed": {"Raw": ["uint8_t *pressed"], "Returns": [["uint8_t", "pressed"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_button", "Writes": {}}, {"SKU": "101020067", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_CO2_Sensor", "GroveName": "Grove - CO2 MH-Z16", "Author": "Mirar", "ImageURL": "http://statics3.seeedstudio.com/images/product/Grove%20CO2%20Sensor.jpg", "ClassName": "GroveCo2MhZ16", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 7, "ConstructArgList": ["int pintx", "int pinrx"], "Files": ["grove_co2_mhz16.cpp", "grove_co2_mhz16.h"], "ClassFile": "grove_co2_mhz16.h", "Description": "The Grove - CO2 Sensor module is infrared CO2 sensor with high sensitivity and high resolution.", "AddedAt": 1465776000, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_temperature": {"Raw": ["float *temperature"], "Returns": [["float", "temperature"]], "Arguments": []}, "read_concentration": {"Raw": ["float *concentration"], "Returns": [["float", "concentration"]], "Arguments": []}, "read_concentration_and_temperature": {"Raw": ["float *concentration", "float *temperature"], "Returns": [["float", "concentration"], ["float", "temperature"]], "Arguments": []}}, "InterfaceType": "UART", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_co2_mhz16", "Writes": {}}, {"SKU": "101020034", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_3-Axis_Compass_V1.0", "GroveName": "Grove-3Axis Compass", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-3-axis-digital-compass.jpg", "ClassName": "GroveCompass", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 8, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_comp_hmc5883l.cpp", "grove_comp_hmc5883l.h"], "ClassFile": "grove_comp_hmc5883l.h", "Description": "This 3-axis digital compass features a low field magnetic sensing multi-chip module HMC5883L, which provides up to 1\u00b0 to 2\u00b0 heading accuracy. HMC5883L consists of high-resolution HMC118X series magneto-resistive sensors, as well as Honeywell developed ASIC containing amplification, automatic degaussing strap drivers, offset cancellation and 12 bit ADC.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_compass_heading": {"Raw": ["float *heading_deg"], "Returns": [["float", "heading_deg"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_comp_hmc5883l", "Writes": {}}, {"SKU": "101020030", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Digital_Light_Sensor", "GroveName": "Grove-Digital Light", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-digital-light-sensor.jpg", "ClassName": "GroveDigitalLight", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 9, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_digital_light.cpp", "grove_digital_light.h"], "ClassFile": "grove_digital_light.h", "Description": "This module is based on the I2C light-to-digital converter TSL2561 to transform light intensity to a digital signal, features a selectable light spectrum range due to its dual light sensitive diodes: infrared and full spectrum.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_lux": {"Raw": ["uint32_t *lux"], "Returns": [["uint32_t", "lux"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_digital_light", "Writes": {}}, {"SKU": "103020014", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Dry-Reed_Relay", "GroveName": "Grove-Dry-Reed Relay", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-dryreed-relay.jpg", "ClassName": "GroveDryReedRelay", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 10, "ConstructArgList": ["int pin"], "Files": ["grove_dryreed_relay.cpp", "grove_dryreed_relay.h"], "ClassFile": "grove_dryreed_relay.h", "Description": "The module is a relay module which works through magnetizing the vibration reed via the current in the coils. Compared to electromagnetic relays, the contacts completely sealed is the biggest feature of the Dry-Reed Relay. Besides, it features simplicity in construct, compactness, fast speed and long life, which make it widely applied in many fields such as microelectronic detection, Automatic Control etc.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_onoff_status": {"Raw": ["int *onoff"], "Returns": [["int", "onoff"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_dryreed_relay", "Writes": {"write_onoff": {"Arguments": [["int", "onoff"]]}}}, {"SKU": "101020012", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Dust_sensor", "GroveName": "Grove - Dust Sensor", "Author": "t.renou@me.com", "ImageURL": "http://statics3.seeedstudio.com/product/Dustsensor_01.jpg", "ClassName": "GroveDust", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Hardware-Hacking-Guide", "ID": 11, "ConstructArgList": ["int pin"], "Files": ["grove_dust.cpp", "grove_dust.h"], "ClassFile": "grove_dust.h", "Description": "This Dust Sensor gives a good indication of the air quality in an environment by measuring the dust concentration. The Particulate Matter level (PM level) in the air is measured by counting the Low Pulse Occupancy time (LPO time) in given time unit. LPO time is proportional to PM concentration. This sensor can provide reliable data for air purifier systems; it is responsive to PM of diameter 1\u03bcm.", "AddedAt": 1470873600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_dust": {"Raw": ["float *dust"], "Returns": [["float", "dust"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": true, "HasEvent": false, "IncludePath": "./grove_drivers/grove_dust", "Writes": {}}, {"SKU": "105020005", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_EL_Driver", "GroveName": "Grove-EL Driver", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-el-driver.jpg", "ClassName": "GroveEL", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 12, "ConstructArgList": ["int pin"], "Files": ["grove_el_driver.cpp", "grove_el_driver.h"], "ClassFile": "grove_el_driver.h", "Description": "Grove - EL Driver is designed for driving EL Wires.It integrates a very small inverter to drive the EL Wire, so you can easily light up the EL Wire with just one single Grove cable.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_onoff_status": {"Raw": ["int *onoff"], "Returns": [["int", "onoff"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_el_driver", "Writes": {"write_onoff": {"Arguments": [["int", "onoff"]]}}}, {"SKU": "101020073", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Electromagnet", "GroveName": "Grove-Electromagnet", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-electromagnet.jpg", "ClassName": "GroveElecMagnet", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 13, "ConstructArgList": ["int pin"], "Files": ["grove_electromagnet.cpp", "grove_electromagnet.h"], "ClassFile": "grove_electromagnet.h", "Description": "Grove - Electromagnet is a type of magnet in which the magnetic field is produced by electric current and it can shuck 1KG weight and hold on.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_onoff_status": {"Raw": ["int *onoff"], "Returns": [["int", "onoff"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_electromagnet", "Writes": {"write_onoff": {"Arguments": [["int", "onoff"]]}}}, {"SKU": "111020001", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Encoder", "GroveName": "Grove - Encoder", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-encoder.jpg", "ClassName": "GroveEncoder", "CanGetLastError": false, "HasPowerOffFunc": true, "HackGuideURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Hardware-Hacking-Guide", "ID": 14, "ConstructArgList": ["int pintx", "int pinrx"], "Files": ["grove_encoder.cpp", "grove_encoder.h"], "ClassFile": "grove_encoder.h", "Description": "This module is an incremental rotary encoder. It encodes the rotation signal from the axis and output the signal by electronic pulse. ", "AddedAt": 1448928000, "Events": {"encoder_position": "int32_t"}, "HasPowerOnFunc": true, "Reads": {"read_position": {"Raw": ["int32_t *position"], "Returns": [["int32_t", "position"]], "Arguments": []}}, "InterfaceType": "UART", "NeedHack": true, "HasEvent": true, "IncludePath": "./grove_drivers/grove_encoder", "Writes": {"write_reset_position": {"Arguments": [["int32_t", "position"]]}, "write_enable_acceleration": {"Arguments": [["uint8_t", "enable"]]}}}, {"SKU": "71714fec-8911-11e5-af63-feff819cdc9f", "WikiURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Grove_Example", "GroveName": "Grove_Example", "Author": "SEEED", "ImageURL": "http://www.seeedstudio.com/depot/includes/templates/bootstrap/images/ico/grove.png", "ClassName": "GroveExample", "CanGetLastError": true, "HasPowerOffFunc": true, "HackGuideURL": "", "ID": 15, "ConstructArgList": ["int pin"], "Files": ["grove_example.cpp", "grove_example.h"], "ClassFile": "grove_example.h", "Description": "The Grove Example is test driver for develop, not public.", "AddedAt": 1441065600, "Events": {"fire": "int16_t", "event2": "int16_t"}, "HasPowerOnFunc": true, "Reads": {"read_temp": {"Raw": ["int *temp"], "Returns": [["int", "temp"]], "Arguments": []}, "read_uint8_value": {"Raw": ["uint8_t *value"], "Returns": [["uint8_t", "value"]], "Arguments": []}, "read_with_arg": {"Raw": ["float *cx", "float *cy", "float *cz", "int *degree", "int arg"], "Returns": [["float", "cx"], ["float", "cy"], ["float", "cz"], ["int", "degree"]], "Arguments": [["int", "arg"]]}, "read_compass": {"Raw": ["float *cx", "float *cy", "float *cz", "int *degree"], "Returns": [["float", "cx"], ["float", "cy"], ["float", "cz"], ["int", "degree"]], "Arguments": []}, "read_acc": {"Raw": ["float *ax", "float *ay", "float *az"], "Returns": [["float", "ax"], ["float", "ay"], ["float", "az"]], "Arguments": []}, "read_humidity": {"Raw": ["float *humidity"], "Returns": [["float", "humidity"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_example", "Writes": {"write_multi_value": {"Arguments": [["int", "a"], ["float", "b"], ["uint32_t", "c"]]}, "write_acc_mode": {"Arguments": [["uint8_t", "mode"]]}, "write_float_value": {"Arguments": [["float", "f"]]}}}, {"SKU": "eedec01c-8c5a-11e5-8994-feff819cdc9f", "WikiURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Grove_Generic_Analog_In", "GroveName": "Generic Analog Input", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/wio_generic_analog.png", "ClassName": "GenericAIn", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 16, "ConstructArgList": ["int pin"], "Files": ["grove_generic_analog_in.cpp", "grove_generic_analog_in.h"], "ClassFile": "grove_generic_analog_in.h", "Description": "The Grove Generic Analog In can read external analog value, range on 0~1023.", "AddedAt": 1448928000, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_analog": {"Raw": ["int *analog"], "Returns": [["int", "analog"]], "Arguments": []}, "read_voltage": {"Raw": ["float *volt"], "Returns": [["float", "volt"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_generic_analog_in", "Writes": {}}, {"SKU": "7e3306bc-8911-11e5-af63-feff819cdc9f", "WikiURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Grove_Generic_Digital_In", "GroveName": "Generic Digital Input", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/wio_generic_din.png", "ClassName": "GenericDIn", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 17, "ConstructArgList": ["int pin"], "Files": ["grove_generic_digital_in.cpp", "grove_generic_digital_in.h"], "ClassFile": "grove_generic_digital_in.h", "Description": "The Grove Generic Digital In check the digital input signal. It can connect to another device such as Arduino, Raspberry Pi and so on. It also push a Event when digital input change.", "AddedAt": 1448928000, "Events": {"input_changed": "int16_t", "input_fall": "int16_t", "input_rise": "int16_t"}, "HasPowerOnFunc": false, "Reads": {"read_edge_fall_since_last_read": {"Raw": ["uint32_t *falls"], "Returns": [["uint32_t", "falls"]], "Arguments": []}, "read_edge_rise_since_last_read": {"Raw": ["uint32_t *rises"], "Returns": [["uint32_t", "rises"]], "Arguments": []}, "read_input": {"Raw": ["uint8_t *input"], "Returns": [["uint8_t", "input"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_generic_digital_in", "Writes": {}}, {"SKU": "3a9d9a84-8c59-11e5-8994-feff819cdc9f", "WikiURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Grove_Generic_Digital_Out", "GroveName": "Generic Digital Output", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/wio_generic_dout.png", "ClassName": "GenericDOut", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 18, "ConstructArgList": ["int pin"], "Files": ["grove_generic_digital_out.cpp", "grove_generic_digital_out.h"], "ClassFile": "grove_generic_digital_out.h", "Description": "The Grove Generic Digital Out can output a digital signal to IO. It can control another device such as Arduino, Raspberry Pi and so on. It also can be read for digital IO state.", "AddedAt": 1448928000, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_onoff_status": {"Raw": ["int *onoff"], "Returns": [["int", "onoff"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_generic_digital_out", "Writes": {"write_onoff": {"Arguments": [["int", "onoff"]]}, "write_high_pulse": {"Arguments": [["int", "ms"]]}, "write_low_pulse": {"Arguments": [["int", "ms"]]}}}, {"SKU": "63e25800-a2d2-11e5-bf7f-feff819cdc9f", "WikiURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Grove_Generic_PWM", "GroveName": "Generic PWM/Analog Output", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/wio_generic_analog_output.png", "ClassName": "GenericPWMOut", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 19, "ConstructArgList": ["int pin"], "Files": ["grove_generic_pwm_out.cpp", "grove_generic_pwm_out.h"], "ClassFile": "grove_generic_pwm_out.h", "Description": "The Grove Generic PWM can output a pwm signal whit specified frequency and duty. It also can be read for current state.", "AddedAt": 1448928000, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_pwm": {"Raw": ["float *duty_percent", "uint32_t *freq"], "Returns": [["float", "duty_percent"], ["uint32_t", "freq"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_generic_pwm_out", "Writes": {"write_pwm": {"Arguments": [["float", "duty_percent"]]}, "write_pwm_with_freq": {"Arguments": [["float", "duty_percent"], ["uint32_t", "freq"]]}}}, {"SKU": "856faea2-dbbe-11e6-ab2c-9f75fb373732", "WikiURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Grove_Generic_UART", "GroveName": "Generic UART", "Author": "SEEED", "ImageURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/raw/static/images/wio_generic_uart.png", "ClassName": "GroveUART", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 20, "ConstructArgList": ["int pintx", "int pinrx"], "Files": ["grove_generic_uart.cpp", "grove_generic_uart.h"], "ClassFile": "grove_generic_uart.h", "Description": "The Generic UART module can forward short messages between the internet and the UART port.", "AddedAt": 1484524800, "Events": {"uart_rx": "char *"}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "UART", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_generic_uart", "Writes": {"write_base64_string": {"Arguments": [["char *", "b64_str"]]}, "write_baudrate": {"Arguments": [["uint8_t", "index"]]}, "write_string": {"Arguments": [["char *", "str"]]}}}, {"SKU": "101020083", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Gesture_v1.0", "GroveName": "Grove - Gesture v1.0", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-gesture-paj7620.jpg", "ClassName": "GroveGesture", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 21, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_gesture_paj7620.cpp", "grove_gesture_paj7620.h"], "ClassFile": "grove_gesture_paj7620.h", "Description": "The sensor on Grove - Gesture is PAJ7620U2 that integrates gesture recognition function with general I2C interface into a single chip. It can recognize 9 basic gestures ,and these gestures information can be simply accessed via the I2C bus.", "AddedAt": 1443657600, "Events": {"gesture": "uint8_t"}, "HasPowerOnFunc": false, "Reads": {"read_motion": {"Raw": ["uint8_t *motion"], "Returns": [["uint8_t", "motion"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_gesture_paj7620", "Writes": {}}, {"SKU": "101020050", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_3-Axis_Digital_Gyro", "GroveName": "Grove-3-Axis Digital Gyro", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-3axis-digital-gyro.jpg", "ClassName": "GroveGyroITG3200", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 22, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_gyro_itg3200.cpp", "grove_gyro_itg3200.h"], "ClassFile": "grove_gyro_itg3200.h", "Description": "Grove - 3-Axis Digital Gyro module based on ITG 3200. It is the world\u2019s first single-chip, digital-output, 3-axis MEMS motion processing gyro optimised for gaming, 3D mice, and motion-based remote control applications for Internet connected Digital TVs and Set Top Boxes. The ITG-3200 features three 16-bit analog-to-digital converters (ADCs) for digitising the gyro outputs, a user-selectable internal low-pass filter bandwidth, and a Fast-Mode I2C (400kHz) interface.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_temperature": {"Raw": ["float *temp"], "Returns": [["float", "temp"]], "Arguments": []}, "read_gyro": {"Raw": ["float *gx", "float *gy", "float *gz"], "Returns": [["float", "gx"], ["float", "gy"], ["float", "gz"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_gyro_itg3200", "Writes": {"write_zerocalibrate": {"Arguments": []}}}, {"SKU": "101020046", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Hall_Sensor", "GroveName": "Grove - Hall Sensor", "Author": "SEEED", "ImageURL": "https://statics3.seeedstudio.com/images/product/hall%20sensor.jpg", "ClassName": "GroveHall", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 23, "ConstructArgList": ["int pin"], "Files": ["grove_hall.cpp", "grove_hall.h"], "ClassFile": "grove_hall.h", "Description": "The Hall Sensor measures the Hall Effect, which is a production of a voltage difference across an electrical conductor, transverse to an electric current in the conductor as well as a magnetic field perpendicular to the current.", "AddedAt": 1474416000, "Events": {"state_off": "int16_t", "state_on": "int16_t"}, "HasPowerOnFunc": false, "Reads": {"read_vout": {"Raw": ["uint8_t *vout"], "Returns": [["uint8_t", "vout"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_hall", "Writes": {}}, {"SKU": "103020013", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_I2C_ADC", "GroveName": "Grove - I2C ADC", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-i2c-adc.jpg", "ClassName": "GroveI2CAdc", "CanGetLastError": false, "HasPowerOffFunc": true, "HackGuideURL": "", "ID": 24, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_i2c_adc.cpp", "grove_i2c_adc.h"], "ClassFile": "grove_i2c_adc.h", "Description": "Grove - I2C ADC is a 12-bit precision ADC module based on ADC121C021.", "AddedAt": 1464652800, "Events": {}, "HasPowerOnFunc": true, "Reads": {"read_voltage": {"Raw": ["float *volt"], "Returns": [["float", "volt"]], "Arguments": []}, "read_adc": {"Raw": ["uint32_t *adc_reading"], "Returns": [["uint32_t", "adc_reading"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_i2c_adc", "Writes": {}}, {"SKU": "107020006", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_I2C_FM_Receiver", "GroveName": "Grove - I2C FM Receiver", "Author": "Travis Brown", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/Grove-I2C_FM_Receiver.jpg", "ClassName": "GroveI2cFmReceiver", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 25, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_i2c_fm_receiver.cpp", "grove_i2c_fm_receiver.h"], "ClassFile": "grove_i2c_fm_receiver.h", "Description": "Grove - I2C FM Receiver is a wideband FM receiver module, this module is based on RDA5807M. The RDA5807M series is the newest generation single-chip broadcast FM stereo radio tuner with fully integrated synthesizer.", "AddedAt": 1467331200, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_frequency": {"Raw": ["uint16_t *frequency"], "Returns": [["uint16_t", "frequency"]], "Arguments": []}, "read_volume": {"Raw": ["uint8_t *level"], "Returns": [["uint8_t", "level"]], "Arguments": []}, "read_signal_level": {"Raw": ["uint8_t *rssi"], "Returns": [["uint8_t", "rssi"]], "Arguments": []}, "read_mute_status": {"Raw": ["bool *muted"], "Returns": [["bool", "muted"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_i2c_fm_receiver", "Writes": {"write_mute": {"Arguments": [["bool", "mute"]]}, "write_volume": {"Arguments": [["uint8_t", "level"]]}, "write_frequency": {"Arguments": [["uint16_t", "frequency"]]}}}, {"SKU": "105020001", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_I2C_Motor_Driver_V1.2", "GroveName": "Grove-I2C Motor Driver", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-i2c_motor_driver.jpg", "ClassName": "GroveI2CMotorDriver", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 26, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_i2c_motor_driver.cpp", "grove_i2c_motor_driver.h"], "ClassFile": "grove_i2c_motor_driver.h", "Description": "The Grove I2C motor driver is a new addition to the Grove series with the same easy-to-use interface. Its heart is a dual channel H-bridge driver chip\uff08L298N\uff09that can handle current up to 2A per channel, controlled by an Atmel ATmega8L which handles the I2C communication with for example an Arduino. Both motors can be driven simultaneously while set to a different speed and direction. It can power two brushed DC motors or one 4-wire two-phase stepper motor. It requires a 6V to 15V power supply to power the motor and has an onboard 5V voltage regulator which can power the I2C bus and the Arduino(selectable by jumper). All driver lines are diode protected from back EMF.", "AddedAt": 1451606400, "Events": {}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_i2c_motor_driver", "Writes": {"write_i2c_address": {"Arguments": [["uint8_t", "addr_7bits"]]}, "write_enable_stepper_mode": {"Arguments": [["uint8_t", "direction"], ["uint8_t", "speed"]]}, "write_dcmotor1_resume": {"Arguments": []}, "write_disable_stepper_mode": {"Arguments": []}, "write_dcmotor1_change_direction": {"Arguments": []}, "write_dcmotor_speed": {"Arguments": [["uint8_t", "speed_m1"], ["uint8_t", "speed_m2"]]}, "write_dcmotor2_change_direction": {"Arguments": []}, "write_stepper_steps": {"Arguments": [["uint8_t", "steps"]]}, "write_dcmotor2_resume": {"Arguments": []}, "write_dcmotor2_break": {"Arguments": []}, "write_dcmotor1_break": {"Arguments": []}}}, {"SKU": "101020040", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_IR_Distance_Interrupter_v1.2", "GroveName": "Grove-IR Distance Interrupter", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-ir_distance_interruper.jpg", "ClassName": "GroveIRDistanceInterrupter", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 27, "ConstructArgList": ["int pin"], "Files": ["grove_ir_distance_intr.cpp", "grove_ir_distance_intr.h"], "ClassFile": "grove_ir_distance_intr.h", "Description": "Grove - IR Distance Interrupter is used to detect any object blocking the path of light. The module consists of an IR LED and a photosensor (phototransistor) pair. The light emitted by the IR LED gets reflected by any object placed in front of the sensor and this reflection is detected by the photosensor(phototransistor). Any white (or lighter) colored surface reflects more than black (or darker) colored surface.", "AddedAt": 1443657600, "Events": {"ir_approached": "int16_t"}, "HasPowerOnFunc": false, "Reads": {"read_approach": {"Raw": ["uint8_t *approach"], "Returns": [["uint8_t", "approach"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_ir_distance_intr", "Writes": {}}, {"SKU": "101020026", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Emitter", "GroveName": "Grove - Infrared Emitter", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/Grove-Infrared_Emitter.jpg", "ClassName": "GroveIREmit", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 28, "ConstructArgList": ["int pin"], "Files": ["grove_ir_emitter.cpp", "grove_ir_emitter.h"], "ClassFile": "grove_ir_emitter.h", "Description": "The Infrared Emitter is used to transmit infrared signals through an infrared LED, while there is an Infrared receiver to get the signals on the other side. An infrared LED is like any other LED, with its color centered around 940nm. We can not only use the emitter to transmit data or commands, but also to emulate remotes to control your home appliance using an Arduino. The Infrared Emitter can transmit signals reliable up to 10 meters. Beyond 10 meters, the receiver may not get the signals.", "AddedAt": 1451606400, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_protocal_parameters": {"Raw": ["uint8_t *start_h", "uint8_t *start_l", "uint8_t *n_short", "uint8_t *n_long"], "Returns": [["uint8_t", "start_h"], ["uint8_t", "start_l"], ["uint8_t", "n_short"], ["uint8_t", "n_long"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_ir_emitter", "Writes": {"write_data_hex": {"Arguments": [["char *", "data_hex"]]}, "write_protocol_parameters": {"Arguments": [["uint8_t", "start_h"], ["uint8_t", "start_l"], ["uint8_t", "n_short"], ["uint8_t", "n_long"]]}, "write_data_hex_in_freq": {"Arguments": [["uint16_t", "freq_khz"], ["char *", "data_hex"]]}}}, {"SKU": "101020016", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Receiver", "GroveName": "Grove - Infrared Receiver", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/Grove-Infrared_Receiver.jpg", "ClassName": "GroveIRRecv", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 29, "ConstructArgList": ["int pin"], "Files": ["grove_ir_receiver.cpp", "grove_ir_receiver.h"], "ClassFile": "grove_ir_receiver.h", "Description": "The Infrared Receiver is used to receive infrared signals and also used for remote control detection. There is an IR detector on the Infrared Receiver which is used to get the infrared light emitted by the Infrared Emitter. The IR detector have a demodulator inside that looks for modulated IR at 38 KHz. The Infrared Receiver can receive signals well within 10 meters. If more than 10 meters , the receiver may not get the signals. We often use the two Groves-the Infrared Receiver and the Grove - Infrared Emitter to work together.", "AddedAt": 1451606400, "Events": {"ir_recv_data_hex": "char *", "ir_recv_data_len": "uint8_t"}, "HasPowerOnFunc": false, "Reads": {"read_protocol_parameters": {"Raw": ["uint8_t *start_h", "uint8_t *start_l", "uint8_t *n_short", "uint8_t *n_long"], "Returns": [["uint8_t", "start_h"], ["uint8_t", "start_l"], ["uint8_t", "n_short"], ["uint8_t", "n_long"]], "Arguments": []}, "read_last_data_recved": {"Raw": ["uint16_t *len", "char **data"], "Returns": [["uint16_t", "len"], ["char *", "data"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_ir_receiver", "Writes": {}}, {"SKU": "104030001", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_LCD_RGB_Backlight", "GroveName": "Grove - LCD RGB Backlight", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-lcd_rgb.jpg", "ClassName": "GroveLCDRGB", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Hardware-Hacking-Guide", "ID": 30, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_lcd_rgb.cpp", "grove_lcd_rgb.h", "Print.cpp", "Print.h"], "ClassFile": "grove_lcd_rgb.h", "Description": "Done with tedious mono color backlight? This Grove enables you to set the color to whatever you like via the simple and concise Grove interface. It takes I2C as communication method with your microcontroller. So number of pins required for data exchange and backlight control shrinks from ~10 to 2, relieving IOs for other challenging tasks. Besides, Grove - LCD RGB Backlight supports user-defined characters. Want to get a love heart or some other foreign characters? Just take advantage of this feature and design it!", "AddedAt": 1452211200, "Events": {}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "I2C", "NeedHack": true, "HasEvent": false, "IncludePath": "./grove_drivers/grove_lcd_rgb", "Writes": {"write_display_off": {"Arguments": []}, "write_clear": {"Arguments": []}, "write_float": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["float", "f"], ["uint8_t", "decimal"]]}, "write_backlight_color_rgb": {"Arguments": [["uint8_t", "r"], ["uint8_t", "g"], ["uint8_t", "b"]]}, "write_base64_string": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["char *", "b64_str"]]}, "write_scroll_right": {"Arguments": [["uint8_t", "speed"]]}, "write_scroll_left": {"Arguments": [["uint8_t", "speed"]]}, "write_string": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["char *", "str"]]}, "write_integer": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["int32_t", "i"]]}, "write_display_on": {"Arguments": []}, "write_backlight_color": {"Arguments": [["uint8_t", "color_index"]]}, "write_stop_scroll": {"Arguments": []}}}, {"SKU": "104020006", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_LED_Bar", "GroveName": "Grove - LED Bar", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-led_bar.jpg", "ClassName": "GroveLEDBar", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 31, "ConstructArgList": ["int pintx", "int pinrx"], "Files": ["grove_led_bar.cpp", "grove_led_bar.h"], "ClassFile": "grove_led_bar.h", "Description": "Grove \u2013 LED Bar is comprised of a 10 segment LED gauge bar and an MY9221 LED controlling chip. It can be used as an indicator for remaining battery life, voltage, water level, music volume or other values that require a gradient display. There are 10 LED bars in the LED bar graph: one red, one yellow, one light green, and seven green bars. Demo code is available to get you up and running quickly. It lights up the LEDs sequentially from red to green, so the entire bar graph is lit up in the end. Want to go further? Go ahead and code your own effect.", "AddedAt": 1452211200, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_bits": {"Raw": ["uint16_t *bits"], "Returns": [["uint16_t", "bits"]], "Arguments": []}}, "InterfaceType": "UART", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_led_bar", "Writes": {"write_toggle": {"Arguments": [["uint8_t", "led"]]}, "write_level": {"Arguments": [["float", "level"]]}, "write_single_led": {"Arguments": [["uint8_t", "led"], ["float", "brightness"]]}, "write_bits": {"Arguments": [["uint16_t", "bits"]]}, "write_orientation": {"Arguments": [["uint8_t", "green_to_red"]]}}}, {"SKU": "104990089", "WikiURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Grove-WS2812%20LED%20Strip", "GroveName": "Grove-WS2812 LED Strip 60", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-led_ws2812.jpg", "ClassName": "GroveLedWs2812", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 32, "ConstructArgList": ["int pin"], "Files": ["grove_led_ws2812.cpp", "grove_led_ws2812.h"], "ClassFile": "grove_led_ws2812.h", "Description": "The Grove WS2812 LED Strip is a full-color that external control for each lamp beads. It with high brightness, can achieve effects of full color running water, chasing and scan.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_led_ws2812", "Writes": {"write_clear": {"Arguments": [["uint8_t", "total_led_cnt"], ["char *", "rgb_hex_string"]]}, "write_start_rainbow_flow": {"Arguments": [["uint8_t", "length"], ["uint8_t", "brightness"], ["uint8_t", "speed"]]}, "write_segment": {"Arguments": [["uint8_t", "start"], ["char *", "rgb_hex_string"]]}, "write_stop_rainbow_flow": {"Arguments": []}}}, {"SKU": "101020063", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Loudness_Sensor", "GroveName": "Grove - Loudness Sensor", "Author": "Travis Brown", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-loudness-sensor.jpg", "ClassName": "GroveLoudness", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 33, "ConstructArgList": ["int pin"], "Files": ["grove_loudness.cpp", "grove_loudness.h"], "ClassFile": "grove_loudness.h", "Description": "The Grove - Loudness Sensor is designed to detect the loudness of environmental sound. Based on amplifier LM2904 and a built-in microphone, it amplifies and filters the high frequency signal that received from the microphone, and outputs a positive envelop.", "AddedAt": 1467331200, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_loudness": {"Raw": ["int *loudness"], "Returns": [["int", "loudness"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_loudness", "Writes": {}}, {"SKU": "101020076", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Luminance_Sensor", "GroveName": "Grove - Luminance Sensor", "Author": "Travis Brown", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/Grove-Luminance-Sensor.jpg", "ClassName": "GroveLuminance", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 34, "ConstructArgList": ["int pin"], "Files": ["grove_luminance.cpp", "grove_luminance.h"], "ClassFile": "grove_luminance.h", "Description": "Grove - Luminance Sensor detects the intensity of the ambient light on a surface area. It uses APDS-9002 analog output ambient light photo sensor.", "AddedAt": 1467331200, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_luminance": {"Raw": ["float *lux"], "Returns": [["float", "lux"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_luminance", "Writes": {}}, {"SKU": "101020038", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Magnetic_Switch", "GroveName": "Grove-Magnetic Switch", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-magnetic-switch.jpg", "ClassName": "GroveMagneticSwitch", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 35, "ConstructArgList": ["int pin"], "Files": ["grove_magnetic_switch.cpp", "grove_magnetic_switch.h"], "ClassFile": "grove_magnetic_switch.h", "Description": "This is a Grove interface compatible Magnetic switch module. It is based on encapsulated dry reed switch CT10. CT10 is single-pole, single throw (SPST) type, having normally open ruthenium contacts. The sensor is a double-ended type and may be actuated with an electromagnet, a permanent magnet or a combination of both. The magnetic switch is a wonderful tool for designers who would like to turn a circuit on and off based on proximity.", "AddedAt": 1443657600, "Events": {"mag_approached": "uint8_t"}, "HasPowerOnFunc": false, "Reads": {"read_approach": {"Raw": ["uint8_t *mag_approach"], "Returns": [["uint8_t", "mag_approach"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_magnetic_switch", "Writes": {}}, {"SKU": "101020008", "WikiURL": "http://seeedstudio.com/wiki/Grove_-_Moisture_Sensor", "GroveName": "Grove-Moisture", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-moisture.jpg", "ClassName": "GroveMoisture", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 36, "ConstructArgList": ["int pin"], "Files": ["grove_moisture.cpp", "grove_moisture.h", "grove_moisture_class.cpp", "grove_moisture_class.h"], "ClassFile": "grove_moisture_class.h", "Description": "The Grove - Moisture Sensor can be used to detect the moisture of soil, to judge if there is dampness around the sensor. It can be used to decide if the plants in a garden needs watering. It can be used in gardens to automate watering plants. It can be used very easily by just inserting the sensor into the soil and reading the output using ADC.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_moisture": {"Raw": ["uint16_t *moisture"], "Returns": [["uint16_t", "moisture"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_moisture", "Writes": {}}, {"SKU": "107020008", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_MP3_v2.0", "GroveName": "Grove - MP3 v2.0", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-mp3_v2.jpg", "ClassName": "GroveMP3V2", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 37, "ConstructArgList": ["int pintx", "int pinrx"], "Files": ["grove_mp3_v2.cpp", "grove_mp3_v2.h"], "ClassFile": "grove_mp3_v2.h", "Description": "Grove - MP3 v2.0 is a tiny-size and compact audio module. It supports operations including shuffle and play in an order of various audio files such as WAV and WMV ones. With serial communication, you can use all predefined commands or even the combinations of them to play the music. This module also supports general file systems like FAT16 and FAT32. It gets a Grove UART interface, a 3.5mm audio jack and a micro-SD slot. With this module, you can get some \u201cvoices\u201d for silent applications.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "UART", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_mp3_v2", "Writes": {"write_next": {"Arguments": []}, "write_loop_all": {"Arguments": []}, "write_pause": {"Arguments": []}, "write_resume": {"Arguments": []}, "write_index_to_play": {"Arguments": [["uint8_t", "index"]]}, "write_prev": {"Arguments": []}, "write_volume": {"Arguments": [["uint8_t", "volume"]]}}}, {"SKU": "101020088", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Multichannel_Gas_Sensor", "GroveName": "Grove-Multichannel Gas Sensor", "Author": "SEEED", "ImageURL": "http://statics3.seeedstudio.com/images/product/101020088%201.jpg", "ClassName": "GroveMultiChannelGas", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 38, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_multichannel_gas_mics6814.cpp", "grove_multichannel_gas_mics6814.h"], "ClassFile": "grove_multichannel_gas_mics6814.h", "Description": "Grove \u2013 Multichannel Gas sensor is a environment detecting sensor with a built in MiCS-6814 which can detect many unhealthful gases, and three gases can be measured simultaneously due to its three channels, so it can help you to monitor the concentration which more than one gas. ", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_NH3": {"Raw": ["float *concentration_ppm"], "Returns": [["float", "concentration_ppm"]], "Arguments": []}, "read_CH4": {"Raw": ["float *concentration_ppm"], "Returns": [["float", "concentration_ppm"]], "Arguments": []}, "read_C4H10": {"Raw": ["float *concentration_ppm"], "Returns": [["float", "concentration_ppm"]], "Arguments": []}, "read_NO2": {"Raw": ["float *concentration_ppm"], "Returns": [["float", "concentration_ppm"]], "Arguments": []}, "read_C2H5OH": {"Raw": ["float *concentration_ppm"], "Returns": [["float", "concentration_ppm"]], "Arguments": []}, "read_H2": {"Raw": ["float *concentration_ppm"], "Returns": [["float", "concentration_ppm"]], "Arguments": []}, "read_C3H8": {"Raw": ["float *concentration_ppm"], "Returns": [["float", "concentration_ppm"]], "Arguments": []}, "read_CO": {"Raw": ["float *concentration_ppm"], "Returns": [["float", "concentration_ppm"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_multichannel_gas_mics6814", "Writes": {}}, {"SKU": "104030008", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_OLED_Display_128*64", "GroveName": "Grove - OLED Display 0.96''", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-oled_12864.jpg", "ClassName": "GroveOLED12864", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 39, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_oled_12864.cpp", "grove_oled_12864.h"], "ClassFile": "grove_oled_12864.h", "Description": "Grove - OLED Display 0.96'' is an OLED monochrome 128\u00d764dot matrix display module with Grove 4pin I2C Interface. The characteristics of this display module are high brightness, self-emission, high contrast ratio, slim outline, wide viewing angle, wide temperature range, and low power consumption. It has a bigger screen and uses all the columns from the SSD1308 chip so that it can display more contents than the OLED 96\u00d796.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_oled_12864", "Writes": {"write_clear": {"Arguments": []}, "write_float": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["float", "f"], ["uint8_t", "decimal"]]}, "write_base64_string": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["char *", "b64_str"]]}, "write_scroll_right": {"Arguments": [["uint8_t", "start_row"], ["uint8_t", "end_row"], ["uint8_t", "speed"]]}, "write_scroll_left": {"Arguments": [["uint8_t", "start_row"], ["uint8_t", "end_row"], ["uint8_t", "speed"]]}, "write_string": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["char *", "str"]]}, "write_integer": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["int32_t", "i"]]}, "write_rotate_display": {"Arguments": [["uint8_t", "rotate_or_not"]]}, "write_brightness": {"Arguments": [["uint8_t", "brightness"]]}, "write_inverse_display": {"Arguments": [["uint8_t", "inverse_or_not"]]}, "write_stop_scroll": {"Arguments": []}}}, {"SKU": "104030011", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_OLED_Display_1.12%22", "GroveName": "Grove - OLED Display 1.12''", "Author": "Travis Brown", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-oled_9696.jpg", "ClassName": "GroveOLED9696", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 40, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_oled_9696.cpp", "grove_oled_9696.h"], "ClassFile": "grove_oled_9696.h", "Description": "Grove - OLED 96\u00d796 is constructed with 96\u00d796 dot matrix OLED module LY120 and SSD1327 driver IC which has a number of advantages such as high brightness, self-emission, high contrast ratio, slim / thin outline, wide viewing angle, wide temperature range, and low power consumption.", "AddedAt": 1467331200, "Events": {}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_oled_9696", "Writes": {"write_clear": {"Arguments": []}, "write_float": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["float", "f"], ["uint8_t", "decimal"]]}, "write_base64_string": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["char *", "b64_str"]]}, "write_scroll_right": {"Arguments": [["uint8_t", "start_row"], ["uint8_t", "end_row"], ["uint8_t", "speed"]]}, "write_scroll_left": {"Arguments": [["uint8_t", "start_row"], ["uint8_t", "end_row"], ["uint8_t", "speed"]]}, "write_string": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["char *", "str"]]}, "write_integer": {"Arguments": [["uint8_t", "row"], ["uint8_t", "col"], ["int32_t", "i"]]}, "write_brightness": {"Arguments": [["uint8_t", "brightness"]]}, "write_inverse_display": {"Arguments": [["uint8_t", "inverse_or_not"]]}, "write_stop_scroll": {"Arguments": []}}}, {"SKU": "101020020", "WikiURL": "http://www.seeedstudio.com/wiki/index.php?title=Twig_-_PIR_Motion_Sensor", "GroveName": "Grove-PIR Motion Sensor", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/Grove-PIR_Motion_Sensor.jpg", "ClassName": "GrovePIRMotion", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 41, "ConstructArgList": ["int pin"], "Files": ["grove_pir_motion.cpp", "grove_pir_motion.h"], "ClassFile": "grove_pir_motion.h", "Description": "This is a simple to use PIR motion sensor with Grove compatible interface. Simply connect it to Stem shield and program it, when anyone moves in its detecting range, the sensor outputs HIGH on its SIG pin.", "AddedAt": 1443657600, "Events": {"ir_moved": "int16_t"}, "HasPowerOnFunc": false, "Reads": {"read_approach": {"Raw": ["uint8_t *approach"], "Returns": [["uint8_t", "approach"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_pir_motion", "Writes": {}}, {"SKU": "103020018", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Recorder", "GroveName": "Grove-Recorder", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/Grove-Recorder.jpg", "ClassName": "GroveRecorder", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 42, "ConstructArgList": ["int pin"], "Files": ["grove_recorder.cpp", "grove_recorder.h"], "ClassFile": "grove_recorder.h", "Description": "Grove - Recorder is based on ISD1820P, which can record 8~20 sec by set resistor and cycle play. It can offers true single-chip voice recording, no-volatile storage. Grove - Recorder is 100K and the total 10s for Recorder. This module is very easy to control, which can direct control by push button on board or by microcontroller. ", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_recorder", "Writes": {"write_play_once": {"Arguments": []}}}, {"SKU": "103020005", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Relay", "GroveName": "Grove-Relay", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-relay.jpg", "ClassName": "GroveRelay", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 43, "ConstructArgList": ["int pin"], "Files": ["grove_relay.cpp", "grove_relay.h"], "ClassFile": "grove_relay.h", "Description": "The Relay is a digital normally open switch that controls a relay capable of switching much higher voltages and currents than your normal Arduino boards. When set to HIGH, the LED will light up and the relay will close allowing current to flow. The peak voltage capability is 250V at 10 amps.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_onoff_status": {"Raw": ["int *onoff"], "Returns": [["int", "onoff"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_relay", "Writes": {"write_onoff": {"Arguments": [["int", "onoff"]]}}}, {"SKU": "101020017", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Rotary_Angle_Sensor", "GroveName": "Grove-Rotary Angle Sensor", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-rotary_angle.jpg", "ClassName": "GroveRotaryAngle", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 44, "ConstructArgList": ["int pin"], "Files": ["grove_rotary_angle.cpp", "grove_rotary_angle.h"], "ClassFile": "grove_rotary_angle.h", "Description": "The potentiometer twig produces analog output between 0 and Vcc (5V DC with Seeeduino) on its D1 connector. The D2 connector is not used. The angular range is 300 degrees with a linear change in value. The resistance value is 10k ohms, perfect for Arduino use. This may also be known as a rotary angle sensor.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_angle": {"Raw": ["int *angle"], "Returns": [["int", "angle"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_rotary_angle", "Writes": {}}, {"SKU": "316010005", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Servo", "GroveName": "Grove-Servo", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-servo.jpg", "ClassName": "GroveServo", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 45, "ConstructArgList": ["int pin"], "Files": ["grove_servo.cpp", "grove_servo.h"], "ClassFile": "grove_servo.h", "Description": "Grove - Servo is DC motor with gearing and feedback system. It is used in driving mechanism of robots. The module is a bonus product for Grove lovers. We regulated the three-wire servo into a Grove standard connector. You can plug and play it as a typical Grove module now, without jumper wires clutter. But if you feel more like a proto servo, check out EMAX 9g ES08A High Sensitive Mini Servo. They are the same model, both of good quality and burden-free price.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_angle": {"Raw": ["int *degree"], "Returns": [["int", "degree"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_servo", "Writes": {"write_angle": {"Arguments": [["int", "degree"]]}, "write_angle_motion_in_seconds": {"Arguments": [["int", "degree"], ["int", "seconds"]]}}}, {"SKU": "101020036", "WikiURL": "https://seeeddoc.github.io/Grove-Slide_Potentiometer/", "GroveName": "Grove-Slide-Potentiometer", "Author": "Hging", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-Button.jpg", "ClassName": "GroveSlidePotentiometer", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 46, "ConstructArgList": ["int pin"], "Files": ["grove_slide_potentiometer.cpp", "grove_slide_potentiometer.h"], "ClassFile": "grove_slide_potentiometer.h", "Description": "The Grove Generic Analog In can read external analog value, range on 0~1023.", "AddedAt": 1502409600, "Events": {"slide_changed": "int16_t"}, "HasPowerOnFunc": false, "Reads": {"read_analog": {"Raw": ["int *analog"], "Returns": [["int", "analog"]], "Arguments": []}, "read_voltage": {"Raw": ["float *volt"], "Returns": [["float", "volt"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": true, "IncludePath": "./grove_drivers/grove_slide_potentiometer", "Writes": {}}, {"SKU": "103020004", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Solid_State_Relay", "GroveName": "Grove-Solid State Relay", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-solid-relay.jpg", "ClassName": "GroveSolidStateRelay", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 47, "ConstructArgList": ["int pin"], "Files": ["grove_solid_relay.cpp", "grove_solid_relay.h"], "ClassFile": "grove_solid_relay.h", "Description": "Grove \u2013 Solid State Relay is a non-contact electronic switch module that has relay features. Based on S208T02, it has a maximum output of 250VAC/4A, with a switching speed less than 10ms. This module is equipped with acrylic base and a 3D-printed protection insulation shield, for user\u2019s safety. The featured LED indicates that the relay is on. It can be widely used in various areas such as computer peripheral interfaces, temperature/speed/light adjustment, servo control, petrochemical, medical instrumentations, financial devices, coal, meters, traffic signals, etc.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_onoff_status": {"Raw": ["int *onoff"], "Returns": [["int", "onoff"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_solid_relay", "Writes": {"write_onoff": {"Arguments": [["int", "onoff"]]}}}, {"SKU": "101020023", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Sound_Sensor", "GroveName": "Grove - Sound Sensor", "Author": "Travis Brown", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-sound-sensor.jpg", "ClassName": "GroveSound", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 48, "ConstructArgList": ["int pin"], "Files": ["grove_sound.cpp", "grove_sound.h"], "ClassFile": "grove_sound.h", "Description": "Grove - Sound Sensor can detect the sound strength of the environment. The main component of the module is a simple microphone, which is based on the LM358 amplifier and an electret microphone.", "AddedAt": 1467331200, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_sound_level": {"Raw": ["int *sound_level"], "Returns": [["int", "sound_level"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_sound", "Writes": {}}, {"SKU": "103020012", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_SPDT_Relay(30A)", "GroveName": "Grove - SPDT Relay(30A)", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-spdt_relay_30a.jpg", "ClassName": "GroveSPDTRelay30A", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "https://github.com/Seeed-Studio/Grove_Drivers_for_Wio/wiki/Hardware-Hacking-Guide", "ID": 49, "ConstructArgList": ["int pin"], "Files": ["grove_spdt_relay_30a.cpp", "grove_spdt_relay_30a.h"], "ClassFile": "grove_spdt_relay_30a.h", "Description": "The SPDT Relay(30A) is a high quality Single Pole Double Throw Relay(SPDT).The Relay consists of a coil, 1 common terminal, 1 normally closed terminal, and one normally open terminal. When the coil of the relay is at rest (not energized), the common terminal and the normally closed terminal have continuity. When the coil is energized, the common terminal and the normally open terminal have continuity. This relay's coil is rated up to 5V and the contact is rated up to 30A (@250VAC, 30VDC).You can use it to control high current devices.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_onoff_status": {"Raw": ["int *onoff"], "Returns": [["int", "onoff"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": true, "HasEvent": false, "IncludePath": "./grove_drivers/grove_spdt_relay_30a", "Writes": {"write_onoff": {"Arguments": [["int", "onoff"]]}}}, {"SKU": "107020001", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Speaker", "GroveName": "Grove-Speaker", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/Grove-Speaker.jpg", "ClassName": "GroveSpeaker", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 50, "ConstructArgList": ["int pin"], "Files": ["grove_speaker.cpp", "grove_speaker.h"], "ClassFile": "grove_speaker.h", "Description": "The Grove- Speaker is a module which consists of power amplification and voice outputs. The loudness can be adjusted by the on-board potentiometer. With different input frequency, the loud-speaker generated different tones. Coding the music into arduino, DIY your own music box! ", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_speaker", "Writes": {"write_sound_stop": {"Arguments": []}, "write_sound_ms": {"Arguments": [["int", "freq"], ["int", "duration_ms"]]}, "write_sound_start": {"Arguments": [["int", "freq"]]}}}, {"SKU": "101020089", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Sunlight_Sensor", "GroveName": "Grove - Sunlight Sensor", "Author": "Airdissy", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-sunlight.jpg", "ClassName": "GroveSI114X", "CanGetLastError": true, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 51, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_sunlight.cpp", "grove_sunlight.h"], "ClassFile": "grove_sunlight.h", "Description": "Grove - Sunlight Sensor is a multi-channel digital light sensor, which has the ability to detect UV-light, visible light and infrared light", "AddedAt": 1469059200, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_visiblelight": {"Raw": ["float *VL"], "Returns": [["float", "VL"]], "Arguments": []}, "read_IR": {"Raw": ["float *IR"], "Returns": [["float", "IR"]], "Arguments": []}, "read_UV": {"Raw": ["float *UV"], "Returns": [["float", "UV"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_sunlight", "Writes": {}}, {"SKU": "101020015", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Temperature_Sensor", "GroveName": "Grove - Temperature Sensor", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-temp-sensor.jpg", "ClassName": "GroveTemp", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 52, "ConstructArgList": ["int pin"], "Files": ["grove_temp.cpp", "grove_temp.h"], "ClassFile": "grove_temp.h", "Description": "The Grove - Temperature Sensor uses a Thermistor to detect the ambient temperature. The resistance of a thermistor will increase when the ambient temperature decreases. It's this characteristic that we use to calculate the ambient temperature. The detectable range of this sensor is -40 - 125\u00baC, and the accuracy is \u00b11.5\u00baC", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_temp": {"Raw": ["float *temperature"], "Returns": [["float", "temperature"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_temp", "Writes": {}}, {"SKU": "101020019-ffff", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Temperature_and_Humidity_Sensor", "GroveName": "Grove-Temperature&Humidity", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-Temp%26Humi.jpg", "ClassName": "GroveTempHum", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 53, "ConstructArgList": ["int pin"], "Files": ["grove_temp_hum.cpp", "grove_temp_hum.h"], "ClassFile": "grove_temp_hum.h", "Description": "This is a multifunctional sensor that gives you temperature and relative humidity information at the same time. It utilizes a DHT11 sensor that can meet measurement needs of general purposes. It provides reliable readings when environment humidity condition in between 20% RH and 90% RH, and temperature condition in between 0\u00b0C and 50\u00b0C, covering needs in most home and daily applications that don't contain extreme conditions.", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_humidity": {"Raw": ["float *humidity"], "Returns": [["float", "humidity"]], "Arguments": []}, "read_temperature": {"Raw": ["float *celsius_degree"], "Returns": [["float", "celsius_degree"]], "Arguments": []}, "read_temperature_f": {"Raw": ["float *fahrenheit_degree"], "Returns": [["float", "fahrenheit_degree"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_temp_hum", "Writes": {}}, {"SKU": "101020019", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Temperature_and_Humidity_Sensor_Pro", "GroveName": "Grove-Temperature&Humidity Pro", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-temperature-and-humidity-sensor-pro.jpg", "ClassName": "GroveTempHumPro", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 54, "ConstructArgList": ["int pin"], "Files": ["grove_temp_hum_pro.cpp", "grove_temp_hum_pro.h"], "ClassFile": "grove_temp_hum_pro.h", "Description": "Go pro in temperature and relative humidity measurement applications with this Grove gadget. This is a powerful sister version of our Grove - Temperature and Humidity Sensor. It has more complete and accurate performance than the basic version. The detecting range of this sensor is 5% RH - 99% RH, and -40\u00b0C - 80\u00b0C. And its accuracy satisfyingly reaches up to 2% RH and 0.5\u00b0C. A professional choice for applications that have relatively strict requirements. ", "AddedAt": 1443657600, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_humidity": {"Raw": ["float *humidity"], "Returns": [["float", "humidity"]], "Arguments": []}, "read_temperature": {"Raw": ["float *celsius_degree"], "Returns": [["float", "celsius_degree"]], "Arguments": []}, "read_temperature_f": {"Raw": ["float *fahrenheit_degree"], "Returns": [["float", "fahrenheit_degree"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_temp_hum_pro", "Writes": {}}, {"SKU": "101020193", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Barometer_Sensor(BME280)", "GroveName": "Grove - Temp&Humi&Barometer Sensor (BME280)", "Author": "SEEED", "ImageURL": "http://statics3.seeedstudio.com/seeed/img/2016-06/R425Ianm2Rr93qmJQFUEwGx7.jpg", "ClassName": "GroveBME280", "CanGetLastError": false, "HasPowerOffFunc": true, "HackGuideURL": "", "ID": 55, "ConstructArgList": ["int pinsda", "int pinscl"], "Files": ["grove_temp_humi_baro_bme280.cpp", "grove_temp_humi_baro_bme280.h"], "ClassFile": "grove_temp_humi_baro_bme280.h", "Description": "The module provides precise measurement of not only barometric pressure and temperature, but also the humidity in the environment.", "AddedAt": 1466121600, "Events": {}, "HasPowerOnFunc": true, "Reads": {"read_humidity": {"Raw": ["uint32_t *humidity"], "Returns": [["uint32_t", "humidity"]], "Arguments": []}, "read_temperature": {"Raw": ["float *temperature"], "Returns": [["float", "temperature"]], "Arguments": []}, "read_altitude": {"Raw": ["float *altitude"], "Returns": [["float", "altitude"]], "Arguments": []}, "read_pressure": {"Raw": ["uint32_t *pressure"], "Returns": [["uint32_t", "pressure"]], "Arguments": []}}, "InterfaceType": "I2C", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_temp_humi_baro_bme280", "Writes": {}}, {"SKU": "101020010", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Ultrasonic_Ranger", "GroveName": "Grove - Ultrasonic Ranger", "Author": "SEEED", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-Ultrasonic-Ranger.jpg", "ClassName": "GroveUltraRanger", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 56, "ConstructArgList": ["int pin"], "Files": ["grove_ultrasonic_ranger.cpp", "grove_ultrasonic_ranger.h"], "ClassFile": "grove_ultrasonic_ranger.h", "Description": "This Grove - Ultrasonic sensor is a non-contact distance measurement module which works at 42KHz, suitable for projects that require middle distance measurement.", "AddedAt": 1446336000, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_range_in_inch": {"Raw": ["float *range_inch"], "Returns": [["float", "range_inch"]], "Arguments": []}, "read_range_in_cm": {"Raw": ["float *range_cm"], "Returns": [["float", "range_cm"]], "Arguments": []}}, "InterfaceType": "GPIO", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_ultrasonic_ranger", "Writes": {}}, {"SKU": "101020043", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_UV_Sensor", "GroveName": "Grove - UV Sensor", "Author": "Travis Brown", "ImageURL": "https://raw.githubusercontent.com/Seeed-Studio/Grove_Drivers_for_Wio/static/images/grove-UV-Sensor.jpg", "ClassName": "GroveUV", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 57, "ConstructArgList": ["int pin"], "Files": ["grove_uv.cpp", "grove_uv.h"], "ClassFile": "grove_uv.h", "Description": "The Grove - UV Sensor is used for detecting the intensity of incident ultraviolet(UV) radiation. This form of electromagnetic radiation has shorter wavelengths than visible radiation.", "AddedAt": 1467331200, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_uv_index": {"Raw": ["float *uv_index"], "Returns": [["float", "uv_index"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_uv", "Writes": {}}, {"SKU": "104020000", "WikiURL": "http://www.seeedstudio.com/wiki/Grove_-_Voltage_Divider", "GroveName": "Grove - Voltage Divider", "Author": "SEEED", "ImageURL": "https://statics3.seeedstudio.com/product/Voltage%20Divider_01.jpg", "ClassName": "GroveVolDivider", "CanGetLastError": false, "HasPowerOffFunc": false, "HackGuideURL": "", "ID": 58, "ConstructArgList": ["int pin"], "Files": ["grove_voltage_divider.cpp", "grove_voltage_divider.h"], "ClassFile": "grove_voltage_divider.h", "Description": "The Grove \u2013 Voltage Divider provides an interface for measuring extern voltage, eliminating the need to connect a resistance to input interface. Besides, The voltage gain can select by dial switch.", "AddedAt": 1474502400, "Events": {}, "HasPowerOnFunc": false, "Reads": {"read_voltage_x3": {"Raw": ["float *volt"], "Returns": [["float", "volt"]], "Arguments": []}, "read_voltage_x10": {"Raw": ["float *volt"], "Returns": [["float", "volt"]], "Arguments": []}}, "InterfaceType": "ANALOG", "NeedHack": false, "HasEvent": false, "IncludePath": "./grove_drivers/grove_voltage_divider", "Writes": {}}]